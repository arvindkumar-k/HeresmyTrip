{"version":3,"sources":["UI/form_dropdown.js","UI/form_DateTime.js","UI/form_location.js","UI/eventInput.js","App.js","reportWebVitals.js","index.js"],"names":["DropDownFromControl","Fragment","className","type","name","this","props","id","placeholder","list","dataList","map","item","value","htmlFor","labelName","altText","Component","format","onChangeDate","date","dateString","setState","selectedDay","onSave","_d","onChangeTime","time","timeString","selectedTime","timeField","state","undefined","onChange","includeTime","defaultValue","moment","SearchBar","autocompleteInput","React","createRef","autocomplete","handlePlaceChanged","bind","google","maps","places","Autocomplete","current","types","addListener","place","getPlace","console","log","onPlaceLoaded","ref","InputEvent","travelOptions","startDate","endDate","startTime","location","setFormInput","fieldname","inputValue","setLocation","eventType","dataListName","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.48b4ec0d.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass DropDownFromControl extends Component {\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"col-sm-6\">\n          <div className=\"form-floating\">\n            <input\n              type=\"text\"\n              className=\"form-control\"\n              name={this.props.name}\n              id={this.props.name}\n              placeholder=\"Train\"\n              list={this.props.name + \"_datalist\"}\n            />\n            <datalist id={this.props.name + \"_datalist\"}>\n              {this.props.dataList.map((item) => {\n                return (\n                  <option key={item} value={item}>\n                    {item}\n                  </option>\n                );\n              })}\n            </datalist>\n            <label htmlFor={this.props.name}>{this.props.labelName}</label>\n            {this.props.altText && (\n              <div id={this.props.name} className=\"form-text\">\n                {this.props.altText}\n              </div>\n            )}\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default DropDownFromControl;\n","import React, { Component } from \"react\";\nimport moment from \"moment\";\n\nimport { DatePicker, TimePicker } from \"antd\";\nimport \"antd/dist/antd.css\";\nconst format = \"HH:mm\";\n\nclass DropDownFromControl extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      selectedDay: undefined,\n      selectedTime: undefined,\n    };\n  }\n  onChangeDate = (date, dateString) => {\n    this.setState({ selectedDay: date });\n    this.props.onSave(this.props.name, date._d);\n  };\n  onChangeTime = (time, timeString) => {\n    this.setState({ selectedTime: timeString });\n    this.props.onSave(this.props.timeField, timeString);\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"col-auto sm\">\n          <label htmlFor={this.props.name}>{this.props.labelName}</label>\n          <DatePicker onChange={this.onChangeDate} />\n          {this.props.includeTime && (\n            <TimePicker\n              onChange={this.onChangeTime}\n              defaultValue={moment(\"00:00\", format)}\n              format={format}\n            />\n          )}\n\n          {this.props.altText && (\n            <div id={this.props.name + \"_altText\"} className=\"form-text\">\n              {this.props.altText}\n            </div>\n          )}\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default DropDownFromControl;\n","import React from \"react\";\n/* global google */\n\nclass SearchBar extends React.Component {\n  constructor(props) {\n    super(props);\n    this.autocompleteInput = React.createRef();\n    this.autocomplete = null;\n    this.handlePlaceChanged = this.handlePlaceChanged.bind(this);\n  }\n\n  componentDidMount() {\n    this.autocomplete = new google.maps.places.Autocomplete(\n      this.autocompleteInput.current,\n      { types: [\"geocode\"] }\n    );\n\n    this.autocomplete.addListener(\"place_changed\", this.handlePlaceChanged);\n  }\n\n  handlePlaceChanged() {\n    const place = this.autocomplete.getPlace();\n    console.log(place);\n    this.props.onPlaceLoaded(place);\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <div className=\"col-sm-12\">\n          <div className=\"form-floating\">\n            <input\n              className=\"form-control\"\n              ref={this.autocompleteInput}\n              id=\"autocompleteLocation\"\n              type=\"text\"\n            ></input>\n            <label htmlFor=\"autocompleteLocation\">Location</label>\n          </div>\n        </div>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default SearchBar;\n","import React, { Component } from \"react\";\nimport DropDownFormControl from \"./form_dropdown\";\nimport DateTimeFormControl from \"./form_DateTime\";\nimport LocationFormControl from \"./form_location\";\nclass InputEvent extends Component {\n  state = {\n    travelOptions: [\"Car\", \"Flight\", \"Train\", \"Bus\", \"Bike\", \"Boat\"],\n    startDate: \"\",\n    endDate: \"\",\n    startTime: \"\",\n    location: {},\n  };\n  setFormInput = (fieldname, inputValue) => {\n    this.setState({ [fieldname]: inputValue });\n  };\n  setLocation = (location) => {\n    this.setState({ location });\n  };\n  render() {\n    return (\n      <div className=\"container-fluid\">\n        <div className=\"table table-md\">\n          <div className=\"row\">\n            {/* From DateTime  */}\n            <DateTimeFormControl\n              name=\"startDate\"\n              timeField=\"startTime\"\n              includeTime={true}\n              onSave={this.setFormInput}\n              labelName=\"Start Date\"\n            ></DateTimeFormControl>\n            {/* To DateTime  */}\n            <DateTimeFormControl\n              name=\"endDate\"\n              includeTime={true}\n              timeField=\"endTime\"\n              onSave={this.setFormInput}\n              labelName=\"End Date\"\n              // altText=\"Enter the end date\"\n            ></DateTimeFormControl>\n          </div>\n          <div className=\"row\">\n            <div className=\"col-6\">\n              {/* Mode of Travel */}\n              {this.props.eventType === \"travel\" && (\n                <DropDownFormControl\n                  name=\"travelType\"\n                  dataList={this.state.travelOptions}\n                  labelName=\"Mode of Travel\"\n                  dataListName=\"travelTypeDataList\"\n                  // altText=\"Please enter your mode of Travel\"\n                />\n              )}\n            </div>\n\n            <div className=\"col-6\">\n              <LocationFormControl\n                className=\"\"\n                onPlaceLoaded={this.setLocation}\n              />\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default InputEvent;\n","import \"./App.css\";\nimport EventInput from \"./UI/eventInput\";\nimport React, { Component } from \"react\";\n\nfunction App() {\n  return (\n    <React.Fragment>\n      <h1 className=\"text-center\">Trip Title</h1>\n      <div className=\"form sm-6\">\n        <EventInput eventType=\"travel\" />\n      </div>\n    </React.Fragment>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App eventType=\"Travel\" />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}